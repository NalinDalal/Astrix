// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------
// ENUMS
// ---------------------------------------------

enum GameType {
  DICE
  TILES
  MINESWEEPER
  TILES2
  SEQUENCE
}

enum GameStatus {
  playing
  won
  lost
  cashout
}

enum TransactionType {
  BET
  WIN
  LOSS
  DEPOSIT
  WITHDRAW
  CASHOUT
}

enum TxStatus {
  pending
  confirmed
  failed
}

// ---------------------------------------------
// MODELS
// ---------------------------------------------

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  username       String
  passwordHash   String
  balance        Decimal         @db.Decimal(18, 2) @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  sessions       GameSession[]
  transactions   Transaction[]
}

model GameSession {
  id              String        @id @default(cuid())
  userId          String
  gameType        GameType
  status          GameStatus    @default(playing)
  betAmount       Decimal       @db.Decimal(18, 2)
  multiplier      Decimal?      @db.Decimal(8, 4)
  payoutAmount    Decimal?      @db.Decimal(18, 2)

  // --- Game-specific state ---
  metadata        Json           // flexible per-game info (targets, revealed, etc.)

  // --- Provably fair fields ---
  clientSeed      String?
  serverSeedHash  String?
  serverSeed      String?
  nonce           Int            @default(0)

  // --- Timestamps ---
  startedAt       DateTime       @default(now())
  endedAt         DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // --- Relations ---
  user            User           @relation(fields: [userId], references: [id])
  transactions    Transaction[]
  events          GameEvent[]

  @@index([userId])
  @@index([gameType])
  @@map("game_sessions")
}

model Transaction {
  id             String        @id @default(cuid())
  userId         String
  gameSessionId  String?
  type           TransactionType
  amount         Decimal        @db.Decimal(18, 2)
  currency       String         @default("USD")
  status         TxStatus       @default(pending)
  metadata       Json?
  createdAt      DateTime       @default(now())

  user           User           @relation(fields: [userId], references: [id])
  gameSession    GameSession?   @relation(fields: [gameSessionId], references: [id])

  @@index([userId])
  @@index([gameSessionId])
  @@map("transactions")
}

model GameEvent {
  id             String        @id @default(cuid())
  gameSessionId  String
  eventType      String
  payload        Json
  createdAt      DateTime       @default(now())

  session        GameSession    @relation(fields: [gameSessionId], references: [id])

  @@index([gameSessionId])
  @@map("game_events")
}

